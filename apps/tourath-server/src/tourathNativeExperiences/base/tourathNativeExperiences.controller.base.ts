/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TourathNativeExperiencesService } from "../tourathNativeExperiences.service";
import { TourathNativeExperiencesCreateInput } from "./TourathNativeExperiencesCreateInput";
import { TourathNativeExperiences } from "./TourathNativeExperiences";
import { TourathNativeExperiencesFindManyArgs } from "./TourathNativeExperiencesFindManyArgs";
import { TourathNativeExperiencesWhereUniqueInput } from "./TourathNativeExperiencesWhereUniqueInput";
import { TourathNativeExperiencesUpdateInput } from "./TourathNativeExperiencesUpdateInput";

export class TourathNativeExperiencesControllerBase {
  constructor(protected readonly service: TourathNativeExperiencesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TourathNativeExperiences })
  async createTourathNativeExperiences(
    @common.Body() data: TourathNativeExperiencesCreateInput
  ): Promise<TourathNativeExperiences> {
    return await this.service.createTourathNativeExperiences({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        experienceName: true,
        description: true,
        location: true,
        price: true,
        duration: true,
        capacity: true,
        availability: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TourathNativeExperiences] })
  @ApiNestedQuery(TourathNativeExperiencesFindManyArgs)
  async tourathNativeExperiencesItems(
    @common.Req() request: Request
  ): Promise<TourathNativeExperiences[]> {
    const args = plainToClass(
      TourathNativeExperiencesFindManyArgs,
      request.query
    );
    return this.service.tourathNativeExperiencesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        experienceName: true,
        description: true,
        location: true,
        price: true,
        duration: true,
        capacity: true,
        availability: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TourathNativeExperiences })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tourathNativeExperiences(
    @common.Param() params: TourathNativeExperiencesWhereUniqueInput
  ): Promise<TourathNativeExperiences | null> {
    const result = await this.service.tourathNativeExperiences({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        experienceName: true,
        description: true,
        location: true,
        price: true,
        duration: true,
        capacity: true,
        availability: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TourathNativeExperiences })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTourathNativeExperiences(
    @common.Param() params: TourathNativeExperiencesWhereUniqueInput,
    @common.Body() data: TourathNativeExperiencesUpdateInput
  ): Promise<TourathNativeExperiences | null> {
    try {
      return await this.service.updateTourathNativeExperiences({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          experienceName: true,
          description: true,
          location: true,
          price: true,
          duration: true,
          capacity: true,
          availability: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TourathNativeExperiences })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTourathNativeExperiences(
    @common.Param() params: TourathNativeExperiencesWhereUniqueInput
  ): Promise<TourathNativeExperiences | null> {
    try {
      return await this.service.deleteTourathNativeExperiences({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          experienceName: true,
          description: true,
          location: true,
          price: true,
          duration: true,
          capacity: true,
          availability: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
