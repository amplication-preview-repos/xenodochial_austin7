/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TourathNativeExperiences } from "./TourathNativeExperiences";
import { TourathNativeExperiencesCountArgs } from "./TourathNativeExperiencesCountArgs";
import { TourathNativeExperiencesFindManyArgs } from "./TourathNativeExperiencesFindManyArgs";
import { TourathNativeExperiencesFindUniqueArgs } from "./TourathNativeExperiencesFindUniqueArgs";
import { CreateTourathNativeExperiencesArgs } from "./CreateTourathNativeExperiencesArgs";
import { UpdateTourathNativeExperiencesArgs } from "./UpdateTourathNativeExperiencesArgs";
import { DeleteTourathNativeExperiencesArgs } from "./DeleteTourathNativeExperiencesArgs";
import { TourathNativeExperiencesService } from "../tourathNativeExperiences.service";
@graphql.Resolver(() => TourathNativeExperiences)
export class TourathNativeExperiencesResolverBase {
  constructor(protected readonly service: TourathNativeExperiencesService) {}

  async _tourathNativeExperiencesItemsMeta(
    @graphql.Args() args: TourathNativeExperiencesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TourathNativeExperiences])
  async tourathNativeExperiencesItems(
    @graphql.Args() args: TourathNativeExperiencesFindManyArgs
  ): Promise<TourathNativeExperiences[]> {
    return this.service.tourathNativeExperiencesItems(args);
  }

  @graphql.Query(() => TourathNativeExperiences, { nullable: true })
  async tourathNativeExperiences(
    @graphql.Args() args: TourathNativeExperiencesFindUniqueArgs
  ): Promise<TourathNativeExperiences | null> {
    const result = await this.service.tourathNativeExperiences(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TourathNativeExperiences)
  async createTourathNativeExperiences(
    @graphql.Args() args: CreateTourathNativeExperiencesArgs
  ): Promise<TourathNativeExperiences> {
    return await this.service.createTourathNativeExperiences({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TourathNativeExperiences)
  async updateTourathNativeExperiences(
    @graphql.Args() args: UpdateTourathNativeExperiencesArgs
  ): Promise<TourathNativeExperiences | null> {
    try {
      return await this.service.updateTourathNativeExperiences({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TourathNativeExperiences)
  async deleteTourathNativeExperiences(
    @graphql.Args() args: DeleteTourathNativeExperiencesArgs
  ): Promise<TourathNativeExperiences | null> {
    try {
      return await this.service.deleteTourathNativeExperiences(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
