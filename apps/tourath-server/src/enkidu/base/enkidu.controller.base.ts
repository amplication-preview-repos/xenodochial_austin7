/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EnkiduService } from "../enkidu.service";
import { EnkiduCreateInput } from "./EnkiduCreateInput";
import { Enkidu } from "./Enkidu";
import { EnkiduFindManyArgs } from "./EnkiduFindManyArgs";
import { EnkiduWhereUniqueInput } from "./EnkiduWhereUniqueInput";
import { EnkiduUpdateInput } from "./EnkiduUpdateInput";

export class EnkiduControllerBase {
  constructor(protected readonly service: EnkiduService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Enkidu })
  async createEnkidu(@common.Body() data: EnkiduCreateInput): Promise<Enkidu> {
    return await this.service.createEnkidu({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        eventName: true,
        startDate: true,
        endDate: true,
        location: true,
        description: true,
        capacity: true,
        host: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Enkidu] })
  @ApiNestedQuery(EnkiduFindManyArgs)
  async enkidus(@common.Req() request: Request): Promise<Enkidu[]> {
    const args = plainToClass(EnkiduFindManyArgs, request.query);
    return this.service.enkidus({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        eventName: true,
        startDate: true,
        endDate: true,
        location: true,
        description: true,
        capacity: true,
        host: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Enkidu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async enkidu(
    @common.Param() params: EnkiduWhereUniqueInput
  ): Promise<Enkidu | null> {
    const result = await this.service.enkidu({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        eventName: true,
        startDate: true,
        endDate: true,
        location: true,
        description: true,
        capacity: true,
        host: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Enkidu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEnkidu(
    @common.Param() params: EnkiduWhereUniqueInput,
    @common.Body() data: EnkiduUpdateInput
  ): Promise<Enkidu | null> {
    try {
      return await this.service.updateEnkidu({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          eventName: true,
          startDate: true,
          endDate: true,
          location: true,
          description: true,
          capacity: true,
          host: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Enkidu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEnkidu(
    @common.Param() params: EnkiduWhereUniqueInput
  ): Promise<Enkidu | null> {
    try {
      return await this.service.deleteEnkidu({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          eventName: true,
          startDate: true,
          endDate: true,
          location: true,
          description: true,
          capacity: true,
          host: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
