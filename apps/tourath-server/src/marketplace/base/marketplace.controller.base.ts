/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MarketplaceService } from "../marketplace.service";
import { MarketplaceCreateInput } from "./MarketplaceCreateInput";
import { Marketplace } from "./Marketplace";
import { MarketplaceFindManyArgs } from "./MarketplaceFindManyArgs";
import { MarketplaceWhereUniqueInput } from "./MarketplaceWhereUniqueInput";
import { MarketplaceUpdateInput } from "./MarketplaceUpdateInput";

export class MarketplaceControllerBase {
  constructor(protected readonly service: MarketplaceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Marketplace })
  async createMarketplace(
    @common.Body() data: MarketplaceCreateInput
  ): Promise<Marketplace> {
    return await this.service.createMarketplace({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        productName: true,
        description: true,
        price: true,
        stock: true,
        category: true,
        discount: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Marketplace] })
  @ApiNestedQuery(MarketplaceFindManyArgs)
  async marketplaces(@common.Req() request: Request): Promise<Marketplace[]> {
    const args = plainToClass(MarketplaceFindManyArgs, request.query);
    return this.service.marketplaces({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        productName: true,
        description: true,
        price: true,
        stock: true,
        category: true,
        discount: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Marketplace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async marketplace(
    @common.Param() params: MarketplaceWhereUniqueInput
  ): Promise<Marketplace | null> {
    const result = await this.service.marketplace({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        productName: true,
        description: true,
        price: true,
        stock: true,
        category: true,
        discount: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Marketplace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMarketplace(
    @common.Param() params: MarketplaceWhereUniqueInput,
    @common.Body() data: MarketplaceUpdateInput
  ): Promise<Marketplace | null> {
    try {
      return await this.service.updateMarketplace({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          productName: true,
          description: true,
          price: true,
          stock: true,
          category: true,
          discount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Marketplace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMarketplace(
    @common.Param() params: MarketplaceWhereUniqueInput
  ): Promise<Marketplace | null> {
    try {
      return await this.service.deleteMarketplace({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          productName: true,
          description: true,
          price: true,
          stock: true,
          category: true,
          discount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
