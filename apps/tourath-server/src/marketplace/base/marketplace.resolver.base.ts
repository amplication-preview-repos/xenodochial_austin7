/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Marketplace } from "./Marketplace";
import { MarketplaceCountArgs } from "./MarketplaceCountArgs";
import { MarketplaceFindManyArgs } from "./MarketplaceFindManyArgs";
import { MarketplaceFindUniqueArgs } from "./MarketplaceFindUniqueArgs";
import { CreateMarketplaceArgs } from "./CreateMarketplaceArgs";
import { UpdateMarketplaceArgs } from "./UpdateMarketplaceArgs";
import { DeleteMarketplaceArgs } from "./DeleteMarketplaceArgs";
import { MarketplaceService } from "../marketplace.service";
@graphql.Resolver(() => Marketplace)
export class MarketplaceResolverBase {
  constructor(protected readonly service: MarketplaceService) {}

  async _marketplacesMeta(
    @graphql.Args() args: MarketplaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Marketplace])
  async marketplaces(
    @graphql.Args() args: MarketplaceFindManyArgs
  ): Promise<Marketplace[]> {
    return this.service.marketplaces(args);
  }

  @graphql.Query(() => Marketplace, { nullable: true })
  async marketplace(
    @graphql.Args() args: MarketplaceFindUniqueArgs
  ): Promise<Marketplace | null> {
    const result = await this.service.marketplace(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Marketplace)
  async createMarketplace(
    @graphql.Args() args: CreateMarketplaceArgs
  ): Promise<Marketplace> {
    return await this.service.createMarketplace({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Marketplace)
  async updateMarketplace(
    @graphql.Args() args: UpdateMarketplaceArgs
  ): Promise<Marketplace | null> {
    try {
      return await this.service.updateMarketplace({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Marketplace)
  async deleteMarketplace(
    @graphql.Args() args: DeleteMarketplaceArgs
  ): Promise<Marketplace | null> {
    try {
      return await this.service.deleteMarketplace(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
